A monotonic stack is a stack data structure that maintains its elements in a specific order (either increasing or decreasing). This property makes it useful for solving problems related to finding the next or previous greater or smaller elements in an array.

Here are some examples to illustrate how the monotonic stack can be implemented in Python:
1. Next Greater Element

Given an array, find the next greater element for each element in the array. The next greater element for an element x is the first greater element on the right side of x in the array.

python

def next_greater_elements(nums):
    stack = []
    result = [-1] * len(nums)

    for i, num in enumerate(nums):
        while stack and nums[stack[-1]] < num:
            index = stack.pop()
            result[index] = num
        stack.append(i)

    return result

nums = [2, 1, 2, 4, 3]
print(next_greater_elements(nums))  # Output: [4, 2, 4, -1, -1]

2. Next Greater Element in a Circular Array

In this variation, the array is considered circular, meaning the next element of the last element is the first element.

python

def next_greater_elements_circular(nums):
    n = len(nums)
    result = [-1] * n
    stack = []

    for i in range(2 * n):
        while stack and nums[stack[-1]] < nums[i % n]:
            index = stack.pop()
            result[index] = nums[i % n]
        if i < n:
            stack.append(i)

    return result

nums = [1, 2, 1]
print(next_greater_elements_circular(nums))  # Output: [2, -1, 2]

3. Next Smaller Element

Given an array, find the next smaller element for each element in the array. The next smaller element for an element x is the first smaller element on the right side of x in the array.

python

def next_smaller_elements(nums):
    stack = []
    result = [-1] * len(nums)

    for i, num in enumerate(nums):
        while stack and nums[stack[-1]] > num:
            index = stack.pop()
            result[index] = num
        stack.append(i)

    return result

nums = [4, 5, 2, 10, 8]
print(next_smaller_elements(nums))  # Output: [2, 2, -1, 8, -1]

4. Largest Rectangle in Histogram

Given an array representing the heights of bars in a histogram, find the area of the largest rectangle that can be formed in the histogram.

python

def largest_rectangle_area(heights):
    stack = []
    max_area = 0
    heights.append(0)  # Append a zero height to flush out remaining heights

    for i, height in enumerate(heights):
        while stack and heights[stack[-1]] > height:
            h = heights[stack.pop()]
            width = i if not stack else i - stack[-1] - 1
            max_area = max(max_area, h * width)
        stack.append(i)

    heights.pop()  # Remove the appended zero height
    return max_area

heights = [2, 1, 5, 6, 2, 3]
print(largest_rectangle_area(heights))  # Output: 10

5. Daily Temperatures

Given a list of daily temperatures, return a list such that for each day, you tell how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead.

python

def daily_temperatures(T):
    stack = []
    result = [0] * len(T)

    for i, temp in enumerate(T):
        while stack and T[stack[-1]] < temp:
            index = stack.pop()
            result[index] = i - index
        stack.append(i)

    return result

T = [73, 74, 75, 71, 69, 72, 76, 73]
print(daily_temperatures(T))  # Output: [1, 1, 4, 2, 1, 1, 0, 0]

6. Trapping Rain Water

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

python

def trap(height):
    stack = []
    water_trapped = 0

    for i, h in enumerate(height):
        while stack and height[stack[-1]] < h:
            top = stack.pop()
            if not stack:
                break
            distance = i - stack[-1] - 1
            bounded_height = min(h, height[stack[-1]]) - height[top]
            water_trapped += distance * bounded_height

        stack.append(i)

    return water_trapped

height = [0,1,0,2,1,0,1,3,2,1,2,1]
print(trap(height))  # Output: 6

7. Maximum Rectangle in Binary Matrix

Given a 2D binary matrix filled with 0s and 1s, find the largest rectangle containing only 1s and return its area.

python

def maximal_rectangle(matrix):
    if not matrix:
        return 0

    max_area = 0
    heights = [0] * len(matrix[0])

    for row in matrix:
        for i in range(len(row)):
            heights[i] = heights[i] + 1 if row[i] == '1' else 0
        max_area = max(max_area, largest_rectangle_area(heights))

    return max_area

# Example binary matrix
matrix = [
    ["1", "0", "1", "0", "0"],
    ["1", "0", "1", "1", "1"],
    ["1", "1", "1", "1", "1"],
    ["1", "0", "0", "1", "0"]
]

print(maximal_rectangle(matrix))  # Output: 6

8. Stock Span Problem

Given the daily price of stocks for n days, find the span of the stock’s price for all n days. The span of the stock’s price today is defined as the maximum number of consecutive days (starting from today and going backwards) for which the price of the stock was less than or equal to today’s price.

python

def stock_span(prices):
    stack = []
    spans = []

    for i, price in enumerate(prices):
        while stack and prices[stack[-1]] <= price:
            stack.pop()
        if not stack:
            spans.append(i + 1)
        else:
            spans.append(i - stack[-1])
        stack.append(i)

    return spans

prices = [100, 80, 60, 70, 60, 75, 85]
print(stock_span(prices))  # Output: [1, 1, 1, 2, 1, 4, 6]

9. Next Greater Element II (Circular Array)

Given a circular array (the next element of the last element is the first element of the array), find the next greater number for every element in the array.

python

def next_greater_elements_circular(nums):
    n = len(nums)
    result = [-1] * n
    stack = []

    for i in range(2 * n):
        while stack and nums[stack[-1]] < nums[i % n]:
            index = stack.pop()
            result[index] = nums[i % n]
        if i < n:
            stack.append(i)

    return result

nums = [1, 2, 1]
print(next_greater_elements_circular(nums))  # Output: [2, -1, 2]

10. Building Skyline Problem

Given the building heights represented as an array, compute the visible skyline.

python

def building_skyline(heights):
    result = []
    stack = []
    
    for i, h in enumerate(heights):
        while stack and heights[stack[-1]] <= h:
            stack.pop()
        if not stack or heights[stack[-1]] > h:
            result.append(h)
        stack.append(i)
    
    return result

heights = [3, 1, 4, 2, 5, 2, 6]
print(building_skyline(heights))  # Output: [3, 4, 5, 6]

Summary

Monotonic stacks are a powerful tool for solving problems where you need to efficiently track the next or previous greater or smaller elements in a sequence. The stack maintains the elements in a monotonically increasing or decreasing order, allowing for quick lookups and updates, often reducing the time complexity from quadratic to linear.
