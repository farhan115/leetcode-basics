The fast and slow pointers technique, also known as the "tortoise and hare" algorithm, is a common approach used to solve problems involving linked lists or arrays, where the goal is often to detect cycles or find the middle of a structure. The technique uses two pointers that move through the data structure at different speedsâ€”typically one moves twice as fast as the other.

Here are some examples to illustrate how the fast and slow pointers technique can be implemented in Python:
1. Detecting a Cycle in a Linked List

Given a linked list, determine if it has a cycle.

python

class ListNode:
    def __init__(self, value=0, next=None):
        self.value = value
        self.next = next

def has_cycle(head):
    slow = fast = head

    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            return True

    return False

# Example linked list creation with a cycle
node1 = ListNode(1)
node2 = ListNode(2)
node3 = ListNode(3)
node4 = ListNode(4)

node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node2  # Creates a cycle

print(has_cycle(node1))  # Output: True

2. Finding the Start of the Cycle in a Linked List

Once a cycle is detected in a linked list, find the node where the cycle begins.

python

def find_cycle_start(head):
    slow = fast = head
    cycle_detected = False

    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            cycle_detected = True
            break

    if not cycle_detected:
        return None

    slow = head
    while slow != fast:
        slow = slow.next
        fast = fast.next

    return slow

# Example linked list creation with a cycle
node1 = ListNode(1)
node2 = ListNode(2)
node3 = ListNode(3)
node4 = ListNode(4)

node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node2  # Creates a cycle

cycle_start = find_cycle_start(node1)
print(cycle_start.value if cycle_start else "No cycle")  # Output: 2

3. Finding the Middle of a Linked List

Given a singly linked list, find the middle node. If there are two middle nodes, return the second middle node.

python

def find_middle(head):
    slow = fast = head

    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next

    return slow

# Example linked list creation
node1 = ListNode(1)
node2 = ListNode(2)
node3 = ListNode(3)
node4 = ListNode(4)
node5 = ListNode(5)

node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node5

middle_node = find_middle(node1)
print(middle_node.value)  # Output: 3

4. Rearrange a Linked List

Given a linked list, rearrange it such that the first node is followed by the last node, then by the second node, then by the second-last node, and so on.

python

def reorder_list(head):
    if not head or not head.next:
        return

    # Step 1: Find the middle of the list
    slow, fast = head, head
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next

    # Step 2: Reverse the second half of the list
    prev, curr = None, slow
    while curr:
        next_node = curr.next
        curr.next = prev
        prev = curr
        curr = next_node

    # Step 3: Merge the two halves
    first, second = head, prev
    while second.next:
        tmp1, tmp2 = first.next, second.next
        first.next = second
        second.next = tmp1
        first, second = tmp1, tmp2

# Example linked list creation
node1 = ListNode(1)
node2 = ListNode(2)
node3 = ListNode(3)
node4 = ListNode(4)
node5 = ListNode(5)

node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node5

reorder_list(node1)

# Print the reordered list
current = node1
while current:
    print(current.value, end=" -> ")
    current = current.next
# Output: 1 -> 5 -> 2 -> 4 -> 3 ->

5. Happy Number

A number is considered happy if, after repeatedly replacing the number by the sum of the squares of its digits, you eventually reach 1. Determine if a number is happy.

python

def is_happy(n):
    def get_next(number):
        return sum(int(char) ** 2 for char in str(number))

    slow = n
    fast = get_next(n)

    while fast != 1 and slow != fast:
        slow = get_next(slow)
        fast = get_next(get_next(fast))

    return fast == 1

n = 19
print(is_happy(n))  # Output: True

6. Linked List Cycle Length

Find the length of the cycle in a linked list if a cycle is present.

python

def cycle_length(head):
    slow = fast = head

    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next

        if slow == fast:
            return calculate_cycle_length(slow)

    return 0

def calculate_cycle_length(slow):
    current = slow
    length = 0

    while True:
        current = current.next
        length += 1
        if current == slow:
            break

    return length

# Example linked list creation with a cycle
node1 = ListNode(1)
node2 = ListNode(2)
node3 = ListNode(3)
node4 = ListNode(4)

node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node2  # Creates a cycle

print(cycle_length(node1))  # Output: 3

7. Palindrome Linked List

Check whether a singly linked list is a palindrome.

python

def is_palindrome(head):
    if not head or not head.next:
        return True

    # Step 1: Find the middle of the linked list
    slow, fast = head, head
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next

    # Step 2: Reverse the second half of the linked list
    prev, curr = None, slow
    while curr:
        next_node = curr.next
        curr.next = prev
        prev = curr
        curr = next_node

    # Step 3: Compare the first and second halves
    first, second = head, prev
    while second:
        if first.value != second.value:
            return False
        first = first.next
        second = second.next

    return True

# Example linked list creation
node1 = ListNode(1)
node2 = ListNode(2)
node3 = ListNode(2)
node4 = ListNode(1)

node1.next = node2
node2.next = node3
node3.next = node4

print(is_palindrome(node1))  # Output: True

8. Find the Intersection Point of Two Linked Lists

Given two singly linked lists, determine if the two lists intersect, and return the intersection point.

python

def get_intersection_node(headA, headB):
    if not headA or not headB:
        return None

    p1, p2 = headA, headB

    while p1 != p2:
        p1 = p1.next if p1 else headB
        p2 = p2.next if p2 else headA

    return p1

# Example linked list creation with intersection
node1 = ListNode(4)
node2 = ListNode(1)
node3 = ListNode(8)
node4 = ListNode(4)
node5 = ListNode(5)

# First list
headA = node1
node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node5

# Second list
node6 = ListNode(5)
node7 = ListNode(6)
node8 = ListNode(1)
headB = node6
node6.next = node7
node7.next = node8
node8.next = node3  # Intersection at node3

intersection = get_intersection_node(headA, headB)
print(intersection.value if intersection else "No intersection")  # Output: 8

9. Linked List Cycle II

Given a linked list, return the node where the cycle begins. If there is no cycle, return None.

python

def detect_cycle(head):
    slow = fast = head

    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            slow = head
            while slow != fast:
                slow = slow.next
                fast = fast.next
            return slow

    return None

# Example linked list creation with a cycle
node1 = ListNode(3)
node2 = ListNode(2)
node3 = ListNode(0)
node4 = ListNode(-4)

node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node2  # Creates a cycle

cycle_start = detect_cycle(node1)
print(cycle_start.value if cycle_start else "No cycle")  # Output: 2

10. Middle of the Linked List

Given a singly linked list, return the middle node of the linked list. If there are two middle nodes, return the second middle node.

python

def middle_node(head):
    slow = fast = head

    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next

    return slow

# Example linked list creation
node1 = ListNode(1)
node2 = ListNode(2)
node3 = ListNode(3)
node4 = ListNode(4)
node5 = ListNode(5)

node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node5

middle = middle_node(node1)
print(middle.value)  # Output: 3

Summary

The fast and slow pointers technique is powerful for solving problems that involve linked lists, particularly when dealing with cycles, middle elements, or intersection points. The idea of moving one pointer faster than the other allows for efficient detection of cycles and other patterns in linear time and with constant space.
