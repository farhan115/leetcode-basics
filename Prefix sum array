Prefix sum is a technique often used in array manipulation problems to efficiently calculate the sum of elements in a subarray. Here's a guide on how to implement the prefix sum and some examples of its use in Python.
1. Basic Prefix Sum Array

The basic idea is to create a new array where each element at index i contains the sum of all elements from the start of the original array up to i.

python

def prefix_sum(arr):
    n = len(arr)
    prefix_sum_arr = [0] * n
    prefix_sum_arr[0] = arr[0]

    for i in range(1, n):
        prefix_sum_arr[i] = prefix_sum_arr[i - 1] + arr[i]

    return prefix_sum_arr

arr = [1, 2, 3, 4, 5]
print(prefix_sum(arr))  # Output: [1, 3, 6, 10, 15]

2. Sum of Elements in a Subarray Using Prefix Sum

Once you have the prefix sum array, you can easily calculate the sum of any subarray from index i to j by using the formula:
Sum(i,j)=prefix_sum[j]−prefix_sum[i−1]
Sum(i,j)=prefix_sum[j]−prefix_sum[i−1]

If i is 0, the sum is simply prefix_sum[j].

python

def sum_subarray(prefix_sum_arr, i, j):
    if i == 0:
        return prefix_sum_arr[j]
    return prefix_sum_arr[j] - prefix_sum_arr[i - 1]

arr = [1, 2, 3, 4, 5]
prefix_sum_arr = prefix_sum(arr)
print(sum_subarray(prefix_sum_arr, 1, 3))  # Output: 9 (2 + 3 + 4)

3. Prefix Sum for 2D Arrays

You can extend the prefix sum concept to 2D arrays (matrices). This is useful when you need to calculate the sum of elements in a submatrix.

python

def prefix_sum_2d(matrix):
    rows, cols = len(matrix), len(matrix[0])
    prefix_sum_matrix = [[0] * cols for _ in range(rows)]

    for i in range(rows):
        for j in range(cols):
            prefix_sum_matrix[i][j] = matrix[i][j]
            if i > 0:
                prefix_sum_matrix[i][j] += prefix_sum_matrix[i - 1][j]
            if j > 0:
                prefix_sum_matrix[i][j] += prefix_sum_matrix[i][j - 1]
            if i > 0 and j > 0:
                prefix_sum_matrix[i][j] -= prefix_sum_matrix[i - 1][j - 1]

    return prefix_sum_matrix

matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

prefix_sum_matrix = prefix_sum_2d(matrix)
print(prefix_sum_matrix)
# Output: 
# [[1, 3, 6], 
#  [5, 12, 21], 
#  [12, 27, 45]]

4. Sum of Submatrix Using 2D Prefix Sum

You can calculate the sum of any submatrix using the 2D prefix sum array.

python

def sum_submatrix(prefix_sum_matrix, i1, j1, i2, j2):
    total = prefix_sum_matrix[i2][j2]
    if i1 > 0:
        total -= prefix_sum_matrix[i1 - 1][j2]
    if j1 > 0:
        total -= prefix_sum_matrix[i2][j1 - 1]
    if i1 > 0 and j1 > 0:
        total += prefix_sum_matrix[i1 - 1][j1 - 1]
    return total

i1, j1 = 1, 1
i2, j2 = 2, 2
print(sum_submatrix(prefix_sum_matrix, i1, j1, i2, j2))  # Output: 28 (5 + 6 + 8 + 9)

5. Using Prefix Sum to Find an Efficient Solution to Range Queries

The prefix sum array is particularly useful when you need to answer multiple range sum queries efficiently.

python

def range_sum_query(arr, queries):
    prefix_sum_arr = prefix_sum(arr)
    results = []
    for i, j in queries:
        results.append(sum_subarray(prefix_sum_arr, i, j))
    return results

arr = [1, 2, 3, 4, 5]
queries = [(1, 3), (0, 2), (2, 4)]
print(range_sum_query(arr, queries))  # Output: [9, 6, 12]

Summary

    Prefix sum array: A technique to preprocess an array so that the sum of any subarray can be found in constant time.
    2D Prefix sum: Extends the concept to matrices for calculating the sum of any submatrix efficiently.
    Range Queries: Prefix sums are especially useful in answering multiple range sum queries quickly.

