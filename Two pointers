The two pointers technique is a popular and efficient algorithmic approach often used to solve problems involving arrays or strings. It works by using two indices (or pointers) that move through the data structure in a way that helps achieve the desired result with reduced complexity.

Here are some common examples of problems that can be solved using the two pointers technique in Python:
1. Finding a Pair with a Given Sum in a Sorted Array

Given a sorted array, find a pair of numbers that add up to a specific target sum.

python

def find_pair_with_sum(arr, target_sum):
    left, right = 0, len(arr) - 1

    while left < right:
        current_sum = arr[left] + arr[right]
        if current_sum == target_sum:
            return (left, right)
        elif current_sum < target_sum:
            left += 1
        else:
            right -= 1

    return None  # No such pair exists

arr = [1, 2, 3, 4, 6]
target_sum = 6
print(find_pair_with_sum(arr, target_sum))  # Output: (1, 3)

2. Removing Duplicates from a Sorted Array

Remove duplicates from a sorted array in place and return the new length of the array.

python

def remove_duplicates(arr):
    if not arr:
        return 0

    left = 1
    for right in range(1, len(arr)):
        if arr[right] != arr[right - 1]:
            arr[left] = arr[right]
            left += 1

    return left

arr = [2, 3, 3, 3, 6, 9, 9]
new_length = remove_duplicates(arr)
print(new_length)  # Output: 4
print(arr[:new_length])  # Output: [2, 3, 6, 9]

3. Squaring a Sorted Array

Given a sorted array of integers, return a new array containing the squares of each number, sorted in non-decreasing order.

python

def sorted_squares(arr):
    n = len(arr)
    squares = [0] * n
    left, right = 0, n - 1
    highest_square_index = n - 1

    while left <= right:
        left_square = arr[left] ** 2
        right_square = arr[right] ** 2
        if left_square > right_square:
            squares[highest_square_index] = left_square
            left += 1
        else:
            squares[highest_square_index] = right_square
            right -= 1
        highest_square_index -= 1

    return squares

arr = [-2, -1, 0, 2, 3]
print(sorted_squares(arr))  # Output: [0, 1, 4, 4, 9]

4. Finding Triplets with Zero Sum

Given an array, find all unique triplets that sum up to zero.

python

def three_sum(arr):
    arr.sort()
    triplets = []
    for i in range(len(arr) - 2):
        if i > 0 and arr[i] == arr[i - 1]:
            continue  # Skip duplicate elements
        left, right = i + 1, len(arr) - 1
        while left < right:
            current_sum = arr[i] + arr[left] + arr[right]
            if current_sum == 0:
                triplets.append([arr[i], arr[left], arr[right]])
                left += 1
                right -= 1
                while left < right and arr[left] == arr[left - 1]:
                    left += 1
                while left < right and arr[right] == arr[right + 1]:
                    right -= 1
            elif current_sum < 0:
                left += 1
            else:
                right -= 1
    return triplets

arr = [-3, 0, 1, 2, -1, 1, -2]
print(three_sum(arr))  # Output: [[-3, 1, 2], [-2, 0, 2], [-1, 0, 1]]

5. Merge Two Sorted Arrays

Merge two sorted arrays into one sorted array.

python

def merge_sorted_arrays(arr1, arr2):
    i, j = 0, 0
    merged = []

    while i < len(arr1) and j < len(arr2):
        if arr1[i] < arr2[j]:
            merged.append(arr1[i])
            i += 1
        else:
            merged.append(arr2[j])
            j += 1

    # Append any remaining elements
    merged.extend(arr1[i:])
    merged.extend(arr2[j:])

    return merged

arr1 = [1, 3, 5]
arr2 = [2, 4, 6]
print(merge_sorted_arrays(arr1, arr2))  # Output: [1, 2, 3, 4, 5, 6]

6. Longest Substring with At Most Two Distinct Characters

Given a string, find the length of the longest substring that contains at most two distinct characters.

python

def longest_substring_with_two_distinct(s):
    left, max_len = 0, 0
    char_map = {}

    for right in range(len(s)):
        char_map[s[right]] = char_map.get(s[right], 0) + 1
        while len(char_map) > 2:
            char_map[s[left]] -= 1
            if char_map[s[left]] == 0:
                del char_map[s[left]]
            left += 1
        max_len = max(max_len, right - left + 1)

    return max_len

s = "eceba"
print(longest_substring_with_two_distinct(s))  # Output: 3 ("ece")

7. Container with Most Water

Given an array where each element represents the height of a line, find the two lines that, together with the x-axis, form a container that holds the most water.

python

def max_area(height):
    left, right = 0, len(height) - 1
    max_water = 0

    while left < right:
        width = right - left
        max_water = max(max_water, min(height[left], height[right]) * width)
        if height[left] < height[right]:
            left += 1
        else:
            right -= 1

    return max_water

height = [1, 8, 6, 2, 5, 4, 8, 3, 7]
print(max_area(height))  # Output: 49

8. Partitioning a List

Partition a list around a pivot such that all elements less than the pivot come before all elements greater than or equal to the pivot.

python

def partition(arr, pivot):
    left, right = 0, len(arr) - 1

    while left <= right:
        if arr[left] < pivot:
            left += 1
        elif arr[right] >= pivot:
            right -= 1
        else:
            arr[left], arr[right] = arr[right], arr[left]
            left += 1
            right -= 1

    return arr

arr = [9, 12, 3, 5, 14, 10, 10]
pivot = 10
print(partition(arr, pivot))  # Output: [9, 3, 5, 10, 14, 12, 10]

9. Finding a Palindrome

Check if a given string is a palindrome using two pointers.

python

def is_palindrome(s):
    left, right = 0, len(s) - 1

    while left < right:
        while left < right and not s[left].isalnum():
            left += 1
        while left < right and not s[right].isalnum():
            right -= 1
        if s[left].lower() != s[right].lower():
            return False
        left += 1
        right -= 1

    return True

s = "A man, a plan, a canal: Panama"
print(is_palindrome(s))  # Output: True

10. Finding Intersection of Two Sorted Arrays

Find the intersection of two sorted arrays.

python

def intersect(arr1, arr2):
    i, j = 0, 0
    intersection = []

    while i < len(arr1) and j < len(arr2):
        if arr1[i] == arr2[j]:
            intersection.append(arr1[i])
            i += 1
            j += 1
        elif arr1[i] < arr2[j]:
            i += 1
        else:
            j += 1

    return intersection

arr1 = [1, 2, 2, 3, 4]
arr2 = [2, 2, 3, 5]
print(intersect(arr1, arr2))  # Output: [2, 2, 3]

Summary

The two pointers technique is versatile and can be applied to various problems, particularly those involving searching, sorting, or comparing elements in arrays or strings. The main advantage of this technique is that it often reduces the time complexity of the solution by narrowing down the search space effectively.
