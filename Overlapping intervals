Working with overlapping intervals is a common problem in algorithms. Below are some Python examples to handle overlapping intervals, such as merging overlapping intervals, finding intersections, and determining if any intervals overlap.
1. Merging Overlapping Intervals

Given a collection of intervals, merge all overlapping intervals.

python

def merge_intervals(intervals):
    if not intervals:
        return []

    # Sort intervals based on the start time
    intervals.sort(key=lambda x: x[0])

    merged = [intervals[0]]

    for i in range(1, len(intervals)):
        # If the current interval overlaps with the last merged interval, merge them
        if intervals[i][0] <= merged[-1][1]:
            merged[-1][1] = max(merged[-1][1], intervals[i][1])
        else:
            merged.append(intervals[i])

    return merged

intervals = [[1, 3], [2, 6], [8, 10], [15, 18]]
print(merge_intervals(intervals))  # Output: [[1, 6], [8, 10], [15, 18]]

2. Checking for Overlapping Intervals

Determine if any intervals in a list overlap.

python

def has_overlapping_intervals(intervals):
    if not intervals:
        return False

    # Sort intervals based on the start time
    intervals.sort(key=lambda x: x[0])

    for i in range(1, len(intervals)):
        # If there is any overlap, return True
        if intervals[i][0] < intervals[i - 1][1]:
            return True

    return False

intervals = [[1, 3], [2, 4], [5, 7]]
print(has_overlapping_intervals(intervals))  # Output: True

intervals = [[1, 2], [3, 4], [5, 6]]
print(has_overlapping_intervals(intervals))  # Output: False

3. Finding the Intersection of Two Interval Lists

Given two lists of intervals, find their intersection.

python

def interval_intersection(A, B):
    i, j = 0, 0
    result = []

    while i < len(A) and j < len(B):
        # Find the intersection between A[i] and B[j]
        start = max(A[i][0], B[j][0])
        end = min(A[i][1], B[j][1])

        if start <= end:
            result.append([start, end])

        # Move to the next interval
        if A[i][1] < B[j][1]:
            i += 1
        else:
            j += 1

    return result

A = [[0, 2], [5, 10], [13, 23], [24, 25]]
B = [[1, 5], [8, 12], [15, 24], [25, 26]]
print(interval_intersection(A, B))  # Output: [[1, 2], [5, 5], [8, 10], [15, 23], [24, 24], [25, 25]]

4. Inserting a New Interval

Given a list of non-overlapping intervals sorted by their start time, insert a new interval into the list, merging if necessary.

python

def insert_interval(intervals, new_interval):
    result = []
    i = 0
    n = len(intervals)

    # Add all intervals before the new interval
    while i < n and intervals[i][1] < new_interval[0]:
        result.append(intervals[i])
        i += 1

    # Merge the new interval with overlapping intervals
    while i < n and intervals[i][0] <= new_interval[1]:
        new_interval[0] = min(new_interval[0], intervals[i][0])
        new_interval[1] = max(new_interval[1], intervals[i][1])
        i += 1
    result.append(new_interval)

    # Add remaining intervals after the new interval
    while i < n:
        result.append(intervals[i])
        i += 1

    return result

intervals = [[1, 3], [6, 9]]
new_interval = [2, 5]
print(insert_interval(intervals, new_interval))  # Output: [[1, 5], [6, 9]]

5. Counting Merged Intervals

Count how many intervals will exist after merging overlapping intervals.

python

def count_merged_intervals(intervals):
    if not intervals:
        return 0

    intervals.sort(key=lambda x: x[0])

    merged_count = 1
    current_interval = intervals[0]

    for i in range(1, len(intervals)):
        if intervals[i][0] <= current_interval[1]:
            current_interval[1] = max(current_interval[1], intervals[i][1])
        else:
            merged_count += 1
            current_interval = intervals[i]

    return merged_count

intervals = [[1, 4], [2, 3], [5, 7], [6, 8], [9, 10]]
print(count_merged_intervals(intervals))  # Output: 3

Summary

Working with intervals often involves sorting and iterating through them to determine overlaps, intersections, and other relationships. Depending on the problem, you can merge intervals, check for overlaps, or even find intersections between two sets of intervals. These methods are essential for dealing with scheduling problems, calendar events, and more.
