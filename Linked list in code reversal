In-place reversal of a linked list refers to reversing the nodes of the list without using extra space for another list or array. This is often done iteratively by adjusting the next pointers of the nodes. Here are some common problems and their Python implementations related to in-place reversal of linked lists:
1. Reverse a Linked List

The most basic problem is reversing an entire linked list in place.

python

class ListNode:
    def __init__(self, value=0, next=None):
        self.value = value
        self.next = next

def reverse_list(head):
    prev = None
    current = head
    
    while current:
        next_node = current.next  # Store the next node
        current.next = prev       # Reverse the current node's pointer
        prev = current            # Move prev and current one step forward
        current = next_node
    
    return prev  # New head of the reversed list

# Example linked list creation
node1 = ListNode(1)
node2 = ListNode(2)
node3 = ListNode(3)
node4 = ListNode(4)
node5 = ListNode(5)

node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node5

reversed_head = reverse_list(node1)

# Print the reversed list
current = reversed_head
while current:
    print(current.value, end=" -> ")
    current = current.next
# Output: 5 -> 4 -> 3 -> 2 -> 1 ->

2. Reverse a Sublist (Partial Reversal)

Reverse a portion of the linked list from position m to n.

python

def reverse_between(head, m, n):
    if not head:
        return None
    
    current, prev = head, None
    for _ in range(m - 1):
        prev = current
        current = current.next

    # Now 'current' is at position m and 'prev' is at position m-1
    last_node_of_first_part = prev
    last_node_of_sublist = current
    next_node = None
    
    # Reverse nodes between m and n
    for _ in range(n - m + 1):
        next_node = current.next
        current.next = prev
        prev = current
        current = next_node
    
    # Connect the reversed sublist back to the main list
    if last_node_of_first_part:
        last_node_of_first_part.next = prev
    else:
        head = prev

    last_node_of_sublist.next = current
    return head

# Example linked list creation
node1 = ListNode(1)
node2 = ListNode(2)
node3 = ListNode(3)
node4 = ListNode(4)
node5 = ListNode(5)

node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node5

reversed_head = reverse_between(node1, 2, 4)

# Print the list after reversing the sublist
current = reversed_head
while current:
    print(current.value, end=" -> ")
    current = current.next
# Output: 1 -> 4 -> 3 -> 2 -> 5 ->

3. Reverse Nodes in k-Group

Reverse the nodes of a linked list k at a time and return its modified list. If the number of nodes is not a multiple of k, then left-out nodes in the end should remain as they are.

python

def reverse_k_group(head, k):
    count = 0
    current = head
    
    # First, check if there are at least k nodes remaining
    while current and count != k:
        current = current.next
        count += 1
    
    if count == k:
        # Reverse the first k nodes
        current = reverse_k_group(current, k)
        while count > 0:
            temp = head.next
            head.next = current
            current = head
            head = temp
            count -= 1
        head = current
        
    return head

# Example linked list creation
node1 = ListNode(1)
node2 = ListNode(2)
node3 = ListNode(3)
node4 = ListNode(4)
node5 = ListNode(5)

node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node5

reversed_head = reverse_k_group(node1, 3)

# Print the list after reversing in k-groups
current = reversed_head
while current:
    print(current.value, end=" -> ")
    current = current.next
# Output: 3 -> 2 -> 1 -> 4 -> 5 ->

4. Reverse Linked List Recursively

Recursively reverse the linked list.

python

def reverse_list_recursive(head):
    if not head or not head.next:
        return head
    
    reversed_list_head = reverse_list_recursive(head.next)
    head.next.next = head
    head.next = None
    
    return reversed_list_head

# Example linked list creation
node1 = ListNode(1)
node2 = ListNode(2)
node3 = ListNode(3)
node4 = ListNode(4)
node5 = ListNode(5)

node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node5

reversed_head = reverse_list_recursive(node1)

# Print the reversed list
current = reversed_head
while current:
    print(current.value, end=" -> ")
    current = current.next
# Output: 5 -> 4 -> 3 -> 2 -> 1 ->

5. Reverse Every Alternate k Nodes

Given a linked list, reverse every alternate k nodes.

python

def reverse_alternate_k_group(head, k):
    current = head
    prev = None
    toggle = True

    while current:
        if toggle:
            last_node_of_previous_part = prev
            last_node_of_sublist = current
            next_node = None

            i = 0
            while current and i < k:
                next_node = current.next
                current.next = prev
                prev = current
                current = next_node
                i += 1

            if last_node_of_previous_part:
                last_node_of_previous_part.next = prev
            else:
                head = prev

            last_node_of_sublist.next = current
            prev = last_node_of_sublist
        else:
            for _ in range(k):
                prev = current
                current = current.next
                if not current:
                    break

        toggle = not toggle

    return head

# Example linked list creation
node1 = ListNode(1)
node2 = ListNode(2)
node3 = ListNode(3)
node4 = ListNode(4)
node5 = ListNode(5)
node6 = ListNode(6)
node7 = ListNode(7)
node8 = ListNode(8)

node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node5
node5.next = node6
node6.next = node7
node7.next = node8

reversed_head = reverse_alternate_k_group(node1, 2)

# Print the list after reversing alternate k-groups
current = reversed_head
while current:
    print(current.value, end=" -> ")
    current = current.next
# Output: 2 -> 1 -> 3 -> 4 -> 6 -> 5 -> 7 -> 8 ->

Summary

In-place reversal of linked lists is a powerful technique that allows you to manipulate the list without extra space. By carefully managing the pointers within the list, you can perform various complex operations like reversing the entire list, reversing sublists, or reversing nodes in groups, while maintaining efficiency in both time and space.
